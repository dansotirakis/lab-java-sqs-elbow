version: "3"
services:
  localstack:
    container_name: ${QUEUE_PROVIDER}
    hostname: ${QUEUE_PROVIDER}
    image: localstack/localstack:latest
    environment:
      - AWS_DEFAULT_REGION=${AWS_REGION}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_DEFAULT_OUTPUT=${AWS_DEFAULT_OUTPUT}
      - EDGE_PORT=${AWS_SQS_PORT}
      - SERVICES=sqs
      - HOSTNAME_EXTERNAL=${QUEUE_PROVIDER}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - DEBUG=1
    ports:
      - "4566:4566"
    volumes:
      - "${TMPDIR:-/tmp/localstack}:/tmp/localstack"
    networks:
      - elbow-network
  database-book:
    container_name: ${DS_NAME}
    image: mysql:8.0
    hostname: ${DS_NAME}
    cap_add:
      - SYS_NICE
    environment:
      - MYSQL_DATABASE=${DS_NAME}
      - MYSQL_ROOT_USER=${DS_USR}
      - MYSQL_ROOT_PASSWORD=${DS_PASS}
    ports:
      - '3306:3306'
    volumes:
      - db:/var/lib/mysql
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - elbow-network
  book-producer:
    container_name: ${BOOK_API_PRODUCER}
    hostname: ${BOOK_API_PRODUCER}
    build:
      context: ./producer/
      dockerfile: ./Dockerfile
    image: book-producer:latest
    ports:
      - '8082:8082'
    environment:
      - QUEUE_URL=${PREFIX_HTTP}://${QUEUE_PROVIDER}:${AWS_SQS_PORT}/${QUEUE_ACCOUNT}/${QUEUE_NAME}
      - QUEUE_PROVIDER=${QUEUE_PROVIDER}
      - QUEUE_NAME=${QUEUE_NAME}
      - DS_URL=${PREFIX_JDBC_MYSQL}://${DS_NAME}:${DS_PORT}/${DS_NAME}
      - DS_PASS=${DS_PASS}
      - DS_USR=${DS_USR}
      - AWS_URL=${PREFIX_HTTP}://${QUEUE_PROVIDER}:${AWS_SQS_PORT}
      - AWS_REGION=${AWS_REGION}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_OUTPUT=${AWS_DEFAULT_OUTPUT}
      - BOOK_API_PRODUCER_PORT=${BOOK_API_PRODUCER_PORT}
    networks:
      - elbow-network
    links:
      - database-book
      - localstack
    depends_on:
      - database-book
      - localstack
  book-consumer:
    container_name: ${BOOK_API_CONSUMER}
    hostname: ${BOOK_API_CONSUMER}
    build:
      context: ./consumer/
      dockerfile: ./Dockerfile
    image: book-consumer:latest
    ports:
      - '8081:8081'
    environment:
      - QUEUE_URL=${PREFIX_HTTP}://${QUEUE_PROVIDER}:${AWS_SQS_PORT}/${QUEUE_ACCOUNT}/${QUEUE_NAME}
      - QUEUE_PROVIDER=${QUEUE_PROVIDER}
      - DS_URL=${PREFIX_JDBC_MYSQL}://${DS_NAME}:${DS_PORT}/${DS_NAME}
      - DS_PASS=${DS_PASS}
      - DS_USR=${DS_USR}
      - AWS_REGION=${AWS_REGION}
      - AWS_URL=${PREFIX_HTTP}://${QUEUE_PROVIDER}:${AWS_SQS_PORT}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_OUTPUT=${AWS_DEFAULT_OUTPUT}
      - BOOK_API_CONSUMER_PORT=${BOOK_API_CONSUMER_PORT}
    links:
      - database-book
      - localstack
    depends_on:
      - database-book
      - localstack
      - book-producer
    networks:
      - elbow-network
  database-engine:
    container_name: ${CAMUNDA_DS_NAME}
    hostname: ${CAMUNDA_DS_NAME}
    image: 'postgres:latest'
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: ${CAMUNDA_DS_USR}
      POSTGRES_PASSWORD: ${CAMUNDA_DS_PASS}
      POSTGRES_DB: ${CAMUNDA_DS_NAME}
    volumes:
      - ./db/postgres:/var/lib/postgresql/data/
    networks:
      - elbow-network
  camunda:
    container_name: ${CAMUNDA_ENGINE}
    hostname: ${CAMUNDA_ENGINE}
    build:
      context: ./camunda-engine/
      dockerfile: ./Dockerfile
    image: camunda-engine-elbow:latest
    ports:
      - '8080:8080'
    environment:
      - DS_URL_CE=${PREFIX_JDBC_POSTGRESQL}://${CAMUNDA_DS_NAME}:${CAMUNDA_DS_PORT}/${CAMUNDA_DS_NAME}
      - DS_PASS_CE=${CAMUNDA_DS_PASS}
      - DS_USR_CE=${CAMUNDA_DS_USR}
      - USR_CE=${CAMUNDA_USR}
      - PASS_CE=${CAMUNDA_PASS}
      - BOOK_API_URL=${PREFIX_HTTP}${BOOK_API_PRODUCER}:${BOOK_API_PRODUCER_PORT}
    depends_on:
      - database-engine
      - book-producer
      - localstack
    links:
      - database-engine
      - book-producer
    networks:
      - elbow-network
volumes:
  db:
    driver: local
networks:
  elbow-network: