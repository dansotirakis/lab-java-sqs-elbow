version: "3"
services:
  localstack:
    container_name: aws_sqs
    hostname: ${HOSTNAME_EXTERNAL}
    image: localstack/localstack:latest
    command: /bin/sh -c "aws --endpoint-url=http://localhost:4566 sqs create-queue --queue-name elbow.fifo --attributes FifoQueue=true"
    environment:
      - AWS_REGION=${AWS_REGION}
      - EDGE_PORT=4566
      - SERVICES=sqs
      - HOSTNAME_EXTERNAL=${HOSTNAME_EXTERNAL}
      - LOCALSTACK_HOSTNAME=${HOSTNAME_EXTERNAL}
    ports:
      - '4566:4566'
    volumes:
      - "${TMPDIR:-/tmp/localstack}:/tmp/localstack"
    networks:
      - elbow-network
  database-book:
    container_name: "database-book"
    image: mysql:8.0
    cap_add:
      - SYS_NICE
    environment:
      - MYSQL_DATABASE=${DS_NAME}
      - MYSQL_ROOT_PASSWORD=${DS_PASS}
    ports:
      - '3306:3306'
    volumes:
      - db:/var/lib/mysql
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - elbow-network
  book-producer:
    container_name: book-producer
    build:
      context: ./producer/
      dockerfile: ./Dockerfile
    image: book-producer:latest
    ports:
      - '8082:8082'
    environment:
      - QUEUE_URL=${QUEUE_PROVIDER}:4566/${QUEUE_ACCOUNT}/${QUEUE_NAME}
      - DS_URL=${DS_PROVIDER}:3306/${DS_NAME}
      - DS_PASS=${DS_PASS}
      - DS_USR=${DS_USR}
      - AWS_REGION=${AWS_REGION}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_OUTPUT=${AWS_DEFAULT_OUTPUT}
    networks:
      - elbow-network
  book-consumer:
    container_name: book-consumer
    build:
      context: ./consumer/
      dockerfile: ./Dockerfile
    image: book-consumer:latest
    ports:
      - '8081:8081'
    environment:
      - QUEUE_URL=${QUEUE_PROVIDER}:4566/${QUEUE_ACCOUNT}/${QUEUE_NAME}
      - DS_URL=${DS_PROVIDER}:3306/${DS_NAME}
      - DS_PASS=${DS_PASS}
      - DS_USR=${DS_USR}
      - AWS_REGION=${AWS_REGION}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_OUTPUT=${AWS_DEFAULT_OUTPUT}
    links:
      - database-book
      - localstack
    depends_on:
      - database-book
      - localstack
    volumes:
      - chmod +x ./sqs_bootstrap.sh
    networks:
      - elbow-network
  database-engine:
    image: 'postgres:latest'
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: ${DS_USR_CE}
      POSTGRES_PASSWORD: ${DS_PASS_CE}
      POSTGRES_DB: ${DS_NAME_CE}
    volumes:
      - ./db-data/:/var/lib/postgresql/data/
    networks:
      - elbow-network
  camunda:
    container_name: camunda-engine-elbow
    build:
      context: ./camunda-engine/
      dockerfile: ./Dockerfile
    image: camunda-engine-elbow:latest
    ports:
      - '8080:8080'
    environment:
      - DS_URL_CE=${DS_PROVIDER_CE}:${DS_PORT_CE}/${DS_NAME_CE}
      - DS_PASS_CE=${DS_PASS_CE}
      - DS_USR_CE=${DS_USR_CE}
      - USR_CE=${USR_CE}
      - PASS_CE=${PASS_CE}
      - BOOK_API_URL=${BOOK_API_URL}
    depends_on:
      - database-engine
      - book-producer
      - localstack
    links:
      - database-engine
      - book-producer
    networks:
      - elbow-network
  elasticsearch-elbow:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.5.0
    container_name: elasticsearch-elbow
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - elbow-network
  optimize-elbow:
    container_name: optimize-elbow
    image: 'registry.camunda.cloud/optimize-ee/optimize@sha256:6dd5b8a9ddc1962b77335e2e131e03fd6c3ca3ff7d1b32b51d023b69da3a0cde'
    ports:
      - "8083:8090"
    environment:
      - OPTIMIZE_ELASTICSEARCH_HTTP_PORT=${ELASTICSEARCH_HTTP_PORT}
      - JAVA_OPTS=-Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m
      - OPTIMIZE_CAMUNDABPM_REST_URL=${OPTIMIZE_CAMUNDABPM_REST_URL}
      - CAMUNDA_BPMN_URL=${CAMUNDA_BPMN_URL}
      - OPTIMIZE_ELASTICSEARCH_HOST=${ELASTICSEARCH_HOST}
      - JAVA_SYSTEM_PROPERTIES=-Xmx1024m
    networks:
      - elbow-network
    depends_on:
      - database-engine
      - camunda
      - elasticsearch-elbow
    volumes:
      - ./optimize-config/environment-config.yaml:/optimize/config/environment-config.yaml
      - ./optimize-config/optimizeLicense.txt:/optimize/config/optimizeLicense.txt
    links:
      - "camunda:camunda"
volumes:
  db:
    driver: local
networks:
  elbow-network: